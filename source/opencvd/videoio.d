/*
Copyright (c) 2019 Ferhat Kurtulmuş
Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module opencvd.videoio;

import std.string;

import opencvd.cvcore;

struct _VideoCapture{
    void* p;
    
    // Close VideoCapture object.
    void close(){
        VideoCapture_Close(&this);
    }
    
    // fromFile opens a VideoCapture from a file and prepares
    // to start capturing.
    bool fromFile(string uri){
        return VideoCapture_Open(&this, toStringz(uri));
    }
    
    // fromDevice opens a VideoCapture from a device and prepares
    // to start capturing.
    bool fromDevice(int device){
        return VideoCapture_OpenDevice(&this, device);
    }
    
    // Set parameter with property 
    void setProperty(VideoCaptureProperty prop, double param){
        VideoCapture_Set(&this, prop, param);
    }
    
    // Get parameter with property 
    double getProperty(VideoCaptureProperty prop){
        return VideoCapture_Get(&this, prop);
    }
    
    // a file or capture device.
    bool isOpened(){
        return VideoCapture_IsOpened(&this) == 0 ? false: true;
    }
    
    // Read reads the next frame from the VideoCapture to the Mat passed in
    // as the param. It returns false if the VideoCapture cannot read frame.
    bool read(Mat buf){
        return VideoCapture_Read(&this, buf) == 0 ? false: true;
    }
    
    // Grab skips a specific number of frames.
    void grab(int skip){
        VideoCapture_Grab(&this, skip);
    }
}

alias VideoCapture  = _VideoCapture*;

VideoCapture newVideoCapture(){
    return VideoCapture_New();
}
/* An example usage

void main()
{
    
    auto cap = newVideoCapture();
    cap.fromDevice(0);

    namedWindow("mywin", 0);
    setWindowTitle("mywin", "süper pencere / 超级窗口");

    for(;;)
    {
        Mat frame = newMat();

        cap.read(frame);

        imshow("mywin", frame);
        
        if (waitKey(10) == 27) break;
    }
    
    cap.close();
}
*/

struct _VideoWriter{
    void* p;
    
    void close(){
        VideoWriter_Close(&this);
    }
    
    void toFile(string name, string codec, double fps, int width,
            int height, bool isColor){
        VideoWriter_Open(&this, toStringz(name), toStringz(codec), fps, width, height, isColor);
    }
    
    bool isOpened(){
        return VideoWriter_IsOpened(&this) == 0 ? false: true;
    }
    
    void write(Mat img){
        VideoWriter_Write(&this, img);
    }
}

alias VideoWriter  = _VideoWriter*;

VideoWriter newVideoWriter(){
    return VideoWriter_New();
}


//private {
    extern (C){
        // VideoCapture
        VideoCapture VideoCapture_New();
        void VideoCapture_Close(VideoCapture v);
        bool VideoCapture_Open(VideoCapture v, const char* uri);
        bool VideoCapture_OpenDevice(VideoCapture v, int device);
        void VideoCapture_Set(VideoCapture v, int prop, double param);
        double VideoCapture_Get(VideoCapture v, int prop);
        int VideoCapture_IsOpened(VideoCapture v);
        int VideoCapture_Read(VideoCapture v, Mat buf);
        void VideoCapture_Grab(VideoCapture v, int skip);

        // VideoWriter
        VideoWriter VideoWriter_New();
        void VideoWriter_Close(VideoWriter vw);
        void VideoWriter_Open(VideoWriter vw, const char* name, const char* codec, double fps, int width,
            int height, bool isColor);
        int VideoWriter_IsOpened(VideoWriter vw);
        void VideoWriter_Write(VideoWriter vw, Mat img);
    }
//}


enum VideoCaptureProperty: int {
	// VideoCapturePosMsec contains current position of the
	// video file in milliseconds.
	VideoCapturePosMsec  = 0,

	// VideoCapturePosFrames 0-based index of the frame to be
	// decoded/captured next.
	VideoCapturePosFrames = 1,

	// VideoCapturePosAVIRatio relative position of the video file:
	// 0=start of the film, 1=end of the film.
	VideoCapturePosAVIRatio = 2,

	// VideoCaptureFrameWidth is width of the frames in the video stream.
	VideoCaptureFrameWidth = 3,

	// VideoCaptureFrameHeight controls height of frames in the video stream.
	VideoCaptureFrameHeight = 4,

	// VideoCaptureFPS controls capture frame rate.
	VideoCaptureFPS = 5,

	// VideoCaptureFOURCC contains the 4-character code of codec.
	// see VideoWriter::fourcc for details.
	VideoCaptureFOURCC = 6,

	// VideoCaptureFrameCount contains number of frames in the video file.
	VideoCaptureFrameCount = 7,

	// VideoCaptureFormat format of the Mat objects returned by
	// VideoCapture::retrieve().
	VideoCaptureFormat = 8,

	// VideoCaptureMode contains backend-specific value indicating
	// the current capture mode.
	VideoCaptureMode = 9,

	// VideoCaptureBrightness is brightness of the image
	// (only for those cameras that support).
	VideoCaptureBrightness = 10,

	// VideoCaptureContrast is contrast of the image
	// (only for cameras that support it).
	VideoCaptureContrast = 11,

	// VideoCaptureSaturation saturation of the image
	// (only for cameras that support).
	VideoCaptureSaturation = 12,

	// VideoCaptureHue hue of the image (only for cameras that support).
	VideoCaptureHue = 13,

	// VideoCaptureGain is the gain of the capture image.
	// (only for those cameras that support).
	VideoCaptureGain = 14,

	// VideoCaptureExposure is the exposure of the capture image.
	// (only for those cameras that support).
	VideoCaptureExposure = 15,

	// VideoCaptureConvertRGB is a boolean flags indicating whether
	// images should be converted to RGB.
	VideoCaptureConvertRGB = 16,

	// VideoCaptureWhiteBalanceBlueU is currently unsupported.
	VideoCaptureWhiteBalanceBlueU = 17,

	// VideoCaptureRectification is the rectification flag for stereo cameras.
	// Note: only supported by DC1394 v 2.x backend currently.
	VideoCaptureRectification = 18,

	// VideoCaptureMonochrome indicates whether images should be
	// converted to monochrome.
	VideoCaptureMonochrome = 19,

	// VideoCaptureSharpness controls image capture sharpness.
	VideoCaptureSharpness = 20,

	// VideoCaptureAutoExposure controls the DC1394 exposure control
	// done by camera, user can adjust reference level using this feature.
	VideoCaptureAutoExposure = 21,

	// VideoCaptureGamma controls video capture gamma.
	VideoCaptureGamma = 22,

	// VideoCaptureTemperature controls video capture temperature.
	VideoCaptureTemperature = 23,

	// VideoCaptureTrigger controls video capture trigger.
	VideoCaptureTrigger = 24,

	// VideoCaptureTriggerDelay controls video capture trigger delay.
	VideoCaptureTriggerDelay = 25,

	// VideoCaptureWhiteBalanceRedV controls video capture setting for
	// white balance.
	VideoCaptureWhiteBalanceRedV = 26,

	// VideoCaptureZoom controls video capture zoom.
	VideoCaptureZoom = 27,

	// VideoCaptureFocus controls video capture focus.
	VideoCaptureFocus = 28,

	// VideoCaptureGUID controls video capture GUID.
	VideoCaptureGUID = 29,

	// VideoCaptureISOSpeed controls video capture ISO speed.
	VideoCaptureISOSpeed = 30,

	// VideoCaptureBacklight controls video capture backlight.
	VideoCaptureBacklight = 32,

	// VideoCapturePan controls video capture pan.
	VideoCapturePan = 33,

	// VideoCaptureTilt controls video capture tilt.
	VideoCaptureTilt = 34,

	// VideoCaptureRoll controls video capture roll.
	VideoCaptureRoll = 35,

	// VideoCaptureIris controls video capture iris.
	VideoCaptureIris = 36,

	// VideoCaptureSettings is the pop up video/camera filter dialog. Note:
	// only supported by DSHOW backend currently. The property value is ignored.
	VideoCaptureSettings = 37,

	// VideoCaptureBufferSize controls video capture buffer size.
	VideoCaptureBufferSize = 38,

	// VideoCaptureAutoFocus controls video capture auto focus..
	VideoCaptureAutoFocus = 39
}


enum: int { 
    CAP_PROP_POS_MSEC =0, 
    CAP_PROP_POS_FRAMES =1, 
    CAP_PROP_POS_AVI_RATIO =2, 
    CAP_PROP_FRAME_WIDTH =3, 
    CAP_PROP_FRAME_HEIGHT =4, 
    CAP_PROP_FPS =5, 
    CAP_PROP_FOURCC =6, 
    CAP_PROP_FRAME_COUNT =7, 
    CAP_PROP_FORMAT =8, 
    CAP_PROP_MODE =9, 
    CAP_PROP_BRIGHTNESS =10, 
    CAP_PROP_CONTRAST =11, 
    CAP_PROP_SATURATION =12, 
    CAP_PROP_HUE =13, 
    CAP_PROP_GAIN =14, 
    CAP_PROP_EXPOSURE =15, 
    CAP_PROP_CONVERT_RGB =16, 
    CAP_PROP_WHITE_BALANCE_BLUE_U =17, 
    CAP_PROP_RECTIFICATION =18, 
    CAP_PROP_MONOCHROME =19, 
    CAP_PROP_SHARPNESS =20, 
    CAP_PROP_AUTO_EXPOSURE =21, 
    CAP_PROP_GAMMA =22, 
    CAP_PROP_TEMPERATURE =23, 
    CAP_PROP_TRIGGER =24, 
    CAP_PROP_TRIGGER_DELAY =25, 
    CAP_PROP_WHITE_BALANCE_RED_V =26, 
    CAP_PROP_ZOOM =27, 
    CAP_PROP_FOCUS =28, 
    CAP_PROP_GUID =29, 
    CAP_PROP_ISO_SPEED =30, 
    CAP_PROP_BACKLIGHT =32, 
    CAP_PROP_PAN =33, 
    CAP_PROP_TILT =34, 
    CAP_PROP_ROLL =35, 
    CAP_PROP_IRIS =36, 
    CAP_PROP_SETTINGS =37, 
    CAP_PROP_BUFFERSIZE =38, 
    CAP_PROP_AUTOFOCUS =39, 
    CAP_PROP_SAR_NUM =40, 
    CAP_PROP_SAR_DEN =41, 
    CAP_PROP_BACKEND =42, 
    CAP_PROP_CHANNEL =43, 
    CAP_PROP_AUTO_WB =44, 
    CAP_PROP_WB_TEMPERATURE =45 
}
