/*
Copyright (c) 2019 Ferhat Kurtulmu≈ü
Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module opencvd.contrib.face;

import std.string;

import opencvd.cvcore;

private extern (C) {
    LBPHFaceRecognizer CreateLBPHFaceRecognizer();
    void LBPHFaceRecognizer_Train(LBPHFaceRecognizer fr, Mats images, IntVector labels);
    void LBPHFaceRecognizer_Update(LBPHFaceRecognizer fr, Mats images, IntVector labels);
    int LBPHFaceRecognizer_Predict(LBPHFaceRecognizer fr, Mat sample);
    PredictResponse LBPHFaceRecognizer_PredictExtended(LBPHFaceRecognizer fr, Mat sample);
    void LBPHFaceRecognizer_SetThreshold(LBPHFaceRecognizer fr, double threshold);
    void LBPHFaceRecognizer_SetRadius(LBPHFaceRecognizer fr, int radius);
    void LBPHFaceRecognizer_SetNeighbors(LBPHFaceRecognizer fr, int neighbors);
    void LBPHFaceRecognizer_SaveFile(LBPHFaceRecognizer fr, const char*  filename);
    void LBPHFaceRecognizer_LoadFile(LBPHFaceRecognizer fr, const char*  filename);
    int LBPHFaceRecognizer_GetNeighbors(LBPHFaceRecognizer fr);
}

struct PredictResponse {
    int label;
    double confidence;
};

struct _LBPHFaceRecognizer {
    void* p;
    
    void train(Mats images, IntVector labels){
        LBPHFaceRecognizer_Train(&this, images, labels);
    }
    
    void update(Mats images, IntVector labels){
        LBPHFaceRecognizer_Update(&this, images, labels);
    }
    
    int predict(Mat sample){
        return LBPHFaceRecognizer_Predict(&this, sample);
    }
    
    PredictResponse predictExtended(Mat sample){
        return LBPHFaceRecognizer_PredictExtended(&this, sample);
    }
    
    void setThreshold(double threshold){
        LBPHFaceRecognizer_SetThreshold(&this, threshold);
    }
    
    void setRadius(int radius){
        LBPHFaceRecognizer_SetRadius(&this, radius);
    }
    
    void setNeighbors(int neighbors){
        LBPHFaceRecognizer_SetNeighbors(&this, neighbors);
    }
    
    void saveFile(string filename){
        LBPHFaceRecognizer_SaveFile(&this, toStringz(filename));
    }
    
    void loadFile(string filename){
        LBPHFaceRecognizer_LoadFile(&this, toStringz(filename));
    }
    
    int getNeighbors(){
        return LBPHFaceRecognizer_GetNeighbors(&this);
    }
}

alias LBPHFaceRecognizer = _LBPHFaceRecognizer*;

LBPHFaceRecognizer newLBPHFaceRecognizer(){
    return CreateLBPHFaceRecognizer();
}
