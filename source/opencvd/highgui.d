/*
Copyright (c) 2019 Ferhat Kurtulmu≈ü
Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module opencvd.highgui;

import std.string;

import opencvd.cvcore;

// function pointers
extern (C) {
    alias TrackbarCallback = void function(int, void*);
    alias MouseCallback = void function(int, int, int, int, void*);
}

enum: int {
    EVENT_MOUSEMOVE,
    EVENT_LBUTTONDOWN,
    EVENT_RBUTTONDOWN,
    EVENT_MBUTTONDOWN,
    EVENT_LBUTTONUP,
    EVENT_RBUTTONUP,
    EVENT_MBUTTONUP,
    EVENT_LBUTTONDBLCLK,
    EVENT_RBUTTONDBLCLK,
    EVENT_MBUTTONDBLCLK,
    EVENT_MOUSEWHEEL,
    EVENT_MOUSEHWHEEL
}

enum: int {
    EVENT_FLAG_LBUTTON,
    EVENT_FLAG_RBUTTON,
    EVENT_FLAG_MBUTTON,
    EVENT_FLAG_CTRLKEY,
    EVENT_FLAG_SHIFTKEY,
    EVENT_FLAG_ALTKEY
}
private extern (C){
    // Window
    void Window_New(const char* winname, int flags);
    void Window_Close(const char* winname);
    void Window_IMShow(const char* winname, Mat mat);
    double Window_GetProperty(const char* winname, int flag);
    void Window_SetProperty(const char* winname, int flag, double value);
    void Window_SetTitle(const char* winname, const char* title);
    int Window_WaitKey(int);
    void Window_Move(const char* winname, int x, int y);
    void Window_Resize(const char* winname, int width, int height);
    Rect Window_SelectROI(const char* winname, Mat img);
    Rects Window_SelectROIs(const char* winname, Mat img);

    // Trackbar
    void Trackbar_CreateWithCallBack(const char* winname, const char* trackname, int* value, int count, TrackbarCallback on_trackbar, void* userdata);
    
    void Trackbar_Create(const char* winname, const char* trackname, int max);
    int Trackbar_GetPos(const char* winname, const char* trackname);
    void Trackbar_SetPos(const char* winname, const char* trackname, int pos);
    void Trackbar_SetMin(const char* winname, const char* trackname, int pos);
    void Trackbar_SetMax(const char* winname, const char* trackname, int pos);
    
    void Win_setMouseCallback(const	char* winname, MouseCallback onMouse, void *userdata);
}



void namedWindow(string winname, int flags = 0){
    Window_New(toStringz(winname), flags);
}

int waitKey(int val){
    return Window_WaitKey(val);
}

void destroyWindow(string winname){
    Window_Close(toStringz(winname));
}

void imshow(string winname, Mat mat){
    Window_IMShow(toStringz(winname), mat);
}

enum: int {
    WND_PROP_FULLSCREEN = 0,
    WND_PROP_AUTOSIZE = 1,
    WND_PROP_ASPECT_RATIO = 2,
    WND_PROP_OPENGL = 3
}


double getWindowProperty(string winname, int flag){
    return Window_GetProperty(toStringz(winname), flag);
}

void setWindowProperty(string winname, int flag, double value){
    Window_SetProperty(toStringz(winname), flag, value);
}

void setWindowTitle(string winname, string title){
    Window_SetTitle(toStringz(winname), toStringz(title));
}

void moveWindow(string winname, int x, int y){
    Window_Move(toStringz(winname), x, y);
}

void resizeWindow(string winname, int width, int height){
    Window_Resize(toStringz(winname), width, height);
}

Rect selectROI(string winname, Mat img){
    return Window_SelectROI(toStringz(winname), img);
}

Rects selectROIs(string winname, Mat img){
    return Window_SelectROIs(toStringz(winname), img);
}

struct TrackBar {
	string name;
	string winname;
    int max;
    
    this(string _name, string _winname, int _max){
       name = _name;
       winname = _winname;
       max = _max;
       
       Trackbar_Create(toStringz(winname), toStringz(name), _max);
    }
    
    this(string _name, string _winname, int* value, int count, TrackbarCallback on_trackbar, void* userdata = null){
        name = _name;
        winname = _winname;
        max = count;
        Trackbar_CreateWithCallBack(toStringz(name), toStringz(winname), value, count, on_trackbar, userdata);
    }
    
    int getPos(){
        return Trackbar_GetPos(toStringz(winname), toStringz(name));
    }
    
    void setPos(int pos){
        Trackbar_SetPos(toStringz(winname), toStringz(name), pos);
    }
    
    void setMin(int pos){
        Trackbar_SetMin(toStringz(winname), toStringz(name), pos);
    }
    
    void setMax(int pos){
        Trackbar_SetMax(toStringz(winname), toStringz(name), pos);
    }
}

void setMouseCallback(string winname, MouseCallback onMouse, void *userdata = null){
    Win_setMouseCallback(toStringz(winname), onMouse, userdata);
}
