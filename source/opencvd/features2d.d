/*
Copyright (c) 2019 Ferhat Kurtulmu≈ü
Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module opencvd.features2d;

import std.conv;

import opencvd.cvcore;

private extern (C){
    AKAZE AKAZE_Create();
    void AKAZE_Close(AKAZE a);
    KeyPoints AKAZE_Detect(AKAZE a, Mat src);
    KeyPoints AKAZE_DetectAndCompute(AKAZE a, Mat src, Mat mask, Mat desc);
    
    AgastFeatureDetector AgastFeatureDetector_Create();
    void AgastFeatureDetector_Close(AgastFeatureDetector a);
    KeyPoints AgastFeatureDetector_Detect(AgastFeatureDetector a, Mat src);

    BRISK BRISK_Create();
    void BRISK_Close(BRISK b);
    KeyPoints BRISK_Detect(BRISK b, Mat src);
    KeyPoints BRISK_DetectAndCompute(BRISK b, Mat src, Mat mask, Mat desc);

    FastFeatureDetector FastFeatureDetector_Create();
    void FastFeatureDetector_Close(FastFeatureDetector f);
    KeyPoints FastFeatureDetector_Detect(FastFeatureDetector f, Mat src);

    GFTTDetector GFTTDetector_Create();
    void GFTTDetector_Close(GFTTDetector a);
    KeyPoints GFTTDetector_Detect(GFTTDetector a, Mat src);

    KAZE KAZE_Create();
    void KAZE_Close(KAZE a);
    KeyPoints KAZE_Detect(KAZE a, Mat src);
    KeyPoints KAZE_DetectAndCompute(KAZE a, Mat src, Mat mask, Mat desc);

    MSER MSER_Create();
    void MSER_Close(MSER a);
    KeyPoints MSER_Detect(MSER a, Mat src);

    ORB ORB_Create();
    void ORB_Close(ORB o);
    KeyPoints ORB_Detect(ORB o, Mat src);
    KeyPoints ORB_DetectAndCompute(ORB o, Mat src, Mat mask, Mat desc);

    SimpleBlobDetector SimpleBlobDetector_Create();
    void SimpleBlobDetector_Close(SimpleBlobDetector b);
    KeyPoints SimpleBlobDetector_Detect(SimpleBlobDetector b, Mat src);

    BFMatcher BFMatcher_Create();
    BFMatcher BFMatcher_CreateWithParams(int normType, bool crossCheck);
    void BFMatcher_Close(BFMatcher b);
    MultiDMatches BFMatcher_KnnMatch(BFMatcher b, Mat query, Mat train, int k);

    void DrawKeyPoints(Mat src, KeyPoints kp, Mat dst, const Scalar s, int flags);
}

struct _AKAZE {
    void* p;
    
    void close(){
        AKAZE_Close(&this);
    }
    
    KeyPoint[] detect(Mat src){
        KeyPoints kpts = AKAZE_Detect(&this, src);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
    
    KeyPoint[] detectAndCompute(Mat src, Mat mask, Mat desc){
        KeyPoints kpts = AKAZE_DetectAndCompute(&this, src, mask, desc);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
}

alias AKAZE = _AKAZE*;

AKAZE newAKAZE(){
    return AKAZE_Create();
}

struct _AgastFeatureDetector{
    void* p;
    
    void close(AgastFeatureDetector a){
        AgastFeatureDetector_Close(&this);
    }
    
    KeyPoint[] detect(Mat src){
        KeyPoints kpts = AgastFeatureDetector_Detect(&this, src);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
}

alias AgastFeatureDetector = _AgastFeatureDetector*;

AgastFeatureDetector newAgastFeatureDetector(){
    return AgastFeatureDetector_Create();
}

struct _BRISK {
    void* p;
    
    void close(){
        BRISK_Close(&this);
    }
    
    KeyPoint[] detect(Mat src){
        KeyPoints kpts = BRISK_Detect(&this, src);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
    
    KeyPoint[] detectAndCompute(Mat src, Mat mask, Mat desc){
        KeyPoints kpts = BRISK_DetectAndCompute(&this, src, mask, desc);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
}

alias BRISK = _BRISK*;

BRISK newBRISK(){
    return BRISK_Create();
}

struct _FastFeatureDetector {
    void* p;
    
    void close(){
        FastFeatureDetector_Close(&this);
    }
    
    KeyPoint[] detect(Mat src){
        KeyPoints kpts = FastFeatureDetector_Detect(&this, src);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
}

alias FastFeatureDetector = _FastFeatureDetector*;

FastFeatureDetector newFastFeatureDetector(){
    return FastFeatureDetector_Create();
}

struct _GFTTDetector {
    void* p;
    
    void close(){
        GFTTDetector_Close(&this);
    }
    
    KeyPoint[] detect(Mat src){
        KeyPoints kpts = GFTTDetector_Detect(&this, src);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
}

alias GFTTDetector = _GFTTDetector*;

GFTTDetector newGFTTDetector(){
    return GFTTDetector_Create();
}

struct _KAZE {
    void* p;
    
    void close(){
        KAZE_Close(&this);
    }
    
    KeyPoint[] detect(Mat src){
        KeyPoints kpts = KAZE_Detect(&this, src);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
    
    KeyPoint[] detectAndCompute(Mat src, Mat mask, Mat desc){
        KeyPoints kpts = KAZE_DetectAndCompute(&this, src, mask, desc);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
}

alias KAZE = _KAZE*;

KAZE newKAZE(){
    return KAZE_Create();
}

struct _MSER {
    void* p;
    
    void close(){
        MSER_Close(&this);
    }
    
    KeyPoint[] detect(Mat src){
        KeyPoints kpts = MSER_Detect(&this, src);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
}
alias MSER = _MSER*;

MSER newMSER(){
    return MSER_Create();
}

struct _ORB {
    void* p;
    
    void close(){
        ORB_Close(&this);
    }
    
    KeyPoint[] detect(Mat src){
        KeyPoints kpts = ORB_Detect(&this, src);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
    
    KeyPoint[] detectAndCompute(Mat src, Mat mask, Mat desc){
        KeyPoints kpts = ORB_DetectAndCompute(&this, src, mask, desc);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
}

alias ORB = _ORB*;

ORB newORB(){
    return ORB_Create();
}

struct _SimpleBlobDetector {
    void* p;
    
    void close(){
        SimpleBlobDetector_Close(&this);
    }
    
    KeyPoint[] detect(Mat src){
        KeyPoints kpts = SimpleBlobDetector_Detect(&this, src);
        KeyPoint[] ret = kpts.keypoints[0..kpts.length].dup;
        KeyPoints_Close(kpts);
        return ret;
    }
}

alias SimpleBlobDetector = _SimpleBlobDetector*;

SimpleBlobDetector newSimpleBlobDetector(){
    return SimpleBlobDetector_Create();
}

struct _BFMatcher {
    void* p;
    
    void close(){
        BFMatcher_Close(&this);
    }
    
    DMatch[][] knnMatch(Mat query, Mat train, int k){
        
        MultiDMatches mdms = BFMatcher_KnnMatch(&this, query, train, k);
        
        DMatch[][] ret;
        foreach(i; 0..mdms.length){
            DMatches ds = mdms.dmatches[i];
            DMatch[] dmats = ds.dmatches[0..ds.length].dup;
            DMatches_Close(ds);
            ret ~= dmats;
        }
        MultiDMatches_Close(mdms);
        return ret;
    }
}

alias BFMatcher = _BFMatcher*;

BFMatcher newBFMatcher(){
    return BFMatcher_Create();
}

BFMatcher newBFMatcherWithParams(int normType, bool crossCheck){
    return BFMatcher_CreateWithParams(normType, crossCheck);
}

enum: int { // cv::DrawMatchesFlags 
    DrawMatchesFlags_DEFAULT = 0, 
    DrawMatchesFlags_DRAW_OVER_OUTIMG = 1, 
    DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS = 2, 
    DrawMatchesFlags_DRAW_RICH_KEYPOINTS = 4 
}

void drawKeyPoints(Mat src, KeyPoint[] kp, Mat dst,
        const Scalar s = Scalar.all(-1), int flags = DrawMatchesFlags_DEFAULT){
    DrawKeyPoints(src, KeyPoints(kp.ptr, kp.length.to!int), dst, s, flags);
}
